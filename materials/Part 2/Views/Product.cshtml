@inherits Umbraco.Web.Mvc.UmbracoViewPage<Merchello.Web.Models.VirtualContent.IProductContent>
@using Merchello.Web.Models.VirtualContent
@using ContentModels = Umbraco.Web.PublishedContentModels;
@{
	Layout = "Master.cshtml";

    // the Model passed here is IProductContent (virtual content) that is not generated by the Models Builder.
    // However, it is a Typed IPublishedContent model that exposes product properties such as Price, SalePrice, etc.
    // and the properties from the ContentType that was attached to the product in Merchello's back office.
    // These can be accessed in the same way as any normal IPublishedContent property e.g. GetPropertyValue
}

<div class="page-header">
    <h1>@Model.Name</h1>
</div>

<div class="row">
    <div class="col-md-4 col-md-push-8">
        @Html.Action("AddProductToBasketForm", "Basket", new { area = "Merchello", model = Model })
    </div>
    <div class="col-md-8 col-md-pull-4">
        <div class="row">
            @if (Model.HasValue("image"))
            {
                // This is using https://our.umbraco.org/projects/developer-tools/umbraco-core-property-value-converters/
                var image = Model.GetPropertyValue<IPublishedContent>("image");
                <div class="col-xs-8">
                    <img class="img-responsive" src="@image.GetCropUrl(height: 450)" alt="@Model.Name">
                </div>
            }
            <div class="col-xs-4">
                @Html.Raw(Model.GetPropertyValue<string>("brief"))
            </div>

        </div>
        <hr />
        @Html.Raw(Model.GetPropertyValue<string>("description"))
    </div>
    @if (Model.HasProperty("relatedProducts") && Model.HasValue("relatedProducts"))
    {
        @Html.Partial("_ProductBoxList", Model.GetPropertyValue<IEnumerable<IProductContent>>("relatedProducts"))
    }

</div>

